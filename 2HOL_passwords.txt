=====================================================================================
2HOL PASSWORDS, TECHNICAL DESCRIPTION OF THE FEATURE, version 2, June 11, 2020
=====================================================================================

I.WHAT IS IT

This document is a description of the gameplay feature implemented, the code addition to the core code of One Hour One Life (OHOL). The modification is made for mod Two Hours One Life (2HOL).
Currently the addition can be viewed at https://github.com/twohoursonelife/OneLife/tree/password-protected-transitions .

II.WHAT IT DOES

In OHOL, in-game objects transmute into each other according to so-called "transitions", the sets of game rules about crafting: how to turn one thing into another thing.

The aim of the current update is to introduce SAID PHRASES - words, typed by players and said by their characters - as POSSIBLE TRANSITION CONDITIONS.

On practice, currently the aimed application of the feature is the addition of "password doors", the doors that can be opened only by a magic word. Which magic word is determined by the door creator, i. e. the player.

III.HOW IT WORKS/HOW CAN I USE THIS - DESCRIPTION FOR PLAYERS

Certain structures in the game are considered "magic": before constructing them the player has the option to say certain predetermined magic incantation, just like the way the naming works. For example, it can be "THE MAGIC WORD IS [some word]". After that, if, during the current life, the player will construct one of magic structures, only the player who possesses the knowledge of the word used before the construction will be allowed any interaction with the object.
    - The magic phrase can be said anywhere, anytime: it "sticks" to the character indefinitely (until the current life lasts), allowing the interaction with any magical structure attuned to the said word without limit;
    - however, the magic phrase resets each time the character builds any magical structure. It is coded that way to prevent accidental assigning of unintended passwords in the subsequential creation of several password-protected structures: each structure will require the new incantation (possibly with the same password). Since the player's password is reset immediately after the construction, it is possible to check it right after the construction is finished: the immediate attempt to interact with freshly-built structure will be denied, but after repeating the magic incantation it will be allowed - until the rest of character's life, until new magical structure will not be constructed, or until the player will not change his password again;
    - the magic structure can be constructed without any magic word attached, in that case it will function like regular structure, allowing the broad access;
    - only one password is allowed per player at a time: saying new magic word will overwrite the previous one; there are no restrictions on number of times players can change their active password; there are no limitations on how many password-protected structures player can create, as long as required construction materials are gathered;
    - players must be careful to not let overhear their magics; however, saying the magic phrase is treated as a special case: unlike the regular words, it can be overheard only by players whose characters are within 6 tiles distance;
    - usual limitations on the phrase limit are applied to passwords: ultra-long passwords efficiently restrict the structure accessibility further only to older characters;
    - the password is applied on the structure at the moment of construction: if pre-construction pickable object was created by one player and then picked up and installed by another player, the password of the builder, not of the creator of the pickable item, will be applied. If the builder doesn't have any password set, the structure in that case will be constructed without password;
    - the exact recipes and possible limitations, such as password expiration after some period of player inactivity, or ways of getting the password reset, are going to be determined at the object design stage and are outside of the described mechanics; currently it is expected that password-protected doors will be introduced, the price of creation is going to be costly, and these objects will decay with time if left unused, decay will happen in two stages: first goes the cosmetic change in appearance, an indication that this particular door requires attention, second goes the magic withering, when the magic door will turn into the regular door.

    EXAMPLE
    
    I know that there are so-called "magic doors" in the latest verison of the game, the codephrase to invoke their potential is "THE MAGIC WORD IS..." I gather the ingredients to make it. When it becomes clear that I'm going to succeed in the construction during the current life, I, while being in the desert, tell the secret to the cactus: "THE MAGIC WORD IS UUGHHWRBRGH". After the cactus and I share the secret, I can be sure the magic will work any time, wherever I'll make the magic door. I prepare the yet-to-be-installed magic door: as a pickable item it still doesn't possess magic, anybody can lift it, as well as construct it. I place stakes on the ground, the usual way to prepare the construction site. After that I use the prepared door on stakes: the structure is finished. Immediately I try to open the door: the attempt failed since my magic is erased by the act of construction, but the door remembers the word. There are other players around, and I don't want them to know my secret, so I wander to desert again, and say again: "THE MAGIC WORD IS UGHHWRBRGH". I return, try to interact with the door again, but it not lets me open it anyway, since I misspelled my password: there must be two Us at the beginning of the word. But I don't realize it: being incredibly pissed, I die and write an angry rant on 2HOL Discord.

IV.HOW IT WORKS/HOW CAN I USE THIS - DESCRIPTION FOR MODDERS

In object files, the instruction to set up certain flag to certain kind of object looks like
>        NAME# +INSTRUCTION
>        NAME# &INSTRUCTION
- in 2nd line of .txt file, where object name is always located, so it looks like
>        Shaky Property Gate# +owned
>        Written Paper# &written
- telling the game that the object from this file is a subject of ownership (writing) mechanics.

2HOL passwords follow the same syntax.
To make building* ("the structure on the ground") capable of carrying the password, the corresponding object file must have "+password-protected" tag:
>       Open Wooden Door# +password-protected
To make hand-held item** capable of getting the password, "+password-assignable" tag must be added
>       Pine Door# +password-assignable
+password-assignable is used for hand-held objects that serve as the source that can be turned into password-protected structure. So freshly constructed but not installed password-protected door gets +password-assignable.
+password-protected is used for results of transitions that involved objects with &can-get-password. So the structure, the installed password-protected door, as well as its open variation, gets +password-protected.

* - only buildings suit for that, other objects are going to result in nonsense: they will not crash server, but prone of weird (unexpected and untested) behavior.
** - only items that can be picked up suit for that, * concern applies here as well.

Just as with tags from the unmodded game, it is possible to add new tags in OHOL Editor to "Description" field.

    USING TAGS IN TRANSITIONS
    
    - transition to assign password: handheld item with +password-assignable tag -> structure with +password-protected tag;
    - transition retaining password: structure with +password-protected tag -> different structure with +password-protected tag;
    - transition leading to password removal:
        - structure with +password-protected tag -> empty space, optionally hand-held item;
        - structure with +password-protected tag -> structure without +password-protected tag.

There are no in-built restrictions on numbers of password-bearing objects that player can create, nor for behavior limitations of these objects: I highly recommend to not introduce any password-bearing object without decay transition that will turn it into generic object after limited amount of time; as cyclical transitions, like opened door with password -> closed door with password -> opened door again, reset the decay timer, it will work as long as the structure remains in regular use.

Regarding specifically password-protected doors (in addition to other possible feature applications): it is expected that this is going to be the best property-protecting option available at the moment; therefore, it must go at a luxurious price effort and resource-wise; the regular upkeep in a form of paid attention to reset decay timer is expected to be the main limiting factor against mass-producing of password-protected objects.

V.SERVER SETTINGS

The feature is coded with a number of tunable options, added as .ini files to .\settings folder.
    
    - passwordTransitionsAllowed.ini : 0 to turn the whole feature off, 1 to turn on.
    - passwordOverhearRadius.ini : how far a player is allowed to stand to be able to overhear another player saying password. Measured in tiles, the default value is 6 tiles. Setting it to 0 will result in other player hearing the password saying only while standing on the same tile where the sayer stands. Setting it to -1 will turn on the silent passwords option: saying passwords will be recognized by the game, but not displayed to anyone, including the sayer.
    - passwordInvocationAndSettingAreSeparated.ini : if set to 1, different codephrases are required for setting up the password before the construction and actual interaction with password-protected structure; if set to 0, both actions are governed by the same codephrase.
    - passwordSettingPhrases.ini : what must be said to assign the password to the structure.
    - passwordInvokingPhrases.ini : what must be said to succesfully interact with password-protected structure; has no effect if passwordInvocationAndSettingAreSeparated.ini is set to 0.
    
All passwords are stored in .\2HOL passwords.txt file, they are recorded here as soon as player installs password-protected structure. The file is used for passwords restoration after server restart or crash. In case of switching the feature off (by setting passwordTransitionsAllowed.ini to 0) the existing passwords are not discarded, but become ignored: all data will start to function again after the feature is turned on. Passwords are stored in the format
    x:5400002|y:-1|word:TEST|id:30007 ,
    where numbers after x:, y: are coordinates of the protected structure, word: precedes the given password and id: indicates the type of the protected structure. Each password record has the timestamp (in separate line). It is purely cosmetical, doesn't influence anything in the password behavior. Manual editing of the given file is expected and will lead to appropriate changes (such as erasing or changing of the standing password, or adding the new password to previously unprotected structure, as long as the corresponding object file possesses "+password-protected" tag).
