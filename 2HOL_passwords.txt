==================================================================================
2HOL PASSWORDS, TECHNICAL DESCRIPTION OF THE FEATURE, version 1. February 12, 2020
==================================================================================

I.WHAT IS IT

This document is a description of code addition to the core code of One Hour One Life (OHOL). The modification is made for mod Two Hours One Life (2HOL).
The addition can be viewed at https://github.com/twohoursonelife/OneLife/tree/Password-doors .

II.WHAT IT DOES

In OHOL, in-game objects transmute into each other according to so-called "transitions", the sets of game rules about crafting: how to turn one thing into another thing.

The aim of the current update is to introduce SAID PHRASES - words, typed by players and said by their characters - as POSSIBLE TRANSITION CONDITIONS.
Such addition provides a potential to a variety of modding possibilities, for example such as introducing verbal magic, voice-operated automatons or password-protected property.

III.HOW IT WORKS/HOW CAN I USE THIS - DESCRIPTION FOR PLAYERS

Currently the feature is implemented as a word determined by player. There is also a potential to make it as a predetermined word. 

- Predetermined word as transition component -
[speculated, not implemented]
In this case the player is expected to say some known word to make some crafting reaction work. As an example, it can be shouting "INCENDIO!" and then touching a wooden branch, turning it into fire.

- Undetermined word as transition component -
It works with concept of twin "passwords": certain kind of objects can hold a password, and each player can carry a password: if password of player and password of object do not match, no interaction is allowed. If they match, any transition or interaction happens as usual.
    - concept of "player's password": "player's password" is set up by using the key phrase, like "THE SECRET WORD IS [SOME WORD]", it works the same way as old mechanics such as "I AM [NAME]" work. It can be said at any time and will stick with the character indefinitely until character's death. Another usage of a key phrase will overwrite the previous player's password, replacing it with the most recent saying.
    - concept of "object's password": "object's password" is set up absolutely the same way as "player's password", just by using the different magic phrase: it can be said, anywhere, anytime, newest object's password will overwrite older one.
    "Object's password" determines the magic word for every password-protected object that character creates during his lifetime.
    "Player's password" determines whether already password-protected object is going to allow any interaction from that particular player. The way it is implemented, it is not going to have any immediate effect on the object that player is holding (freshly created hand-held object) but, once that object will be installed on the ground (be turned into some structure), it will remember to answer only to ones who whispered the right magic word ("player's password"), denying interaction for anybody else. As an example, and as an object kept in mind while designing the abstract feature, it can be firstly crafted and then installed door.

IV.HOW IT WORKS/HOW CAN I USE THIS - DESCRIPTION FOR MODDERS

In object files, the instruction to set up certain flag to certain kind of object looks like
>        NAME# +INSTRUCTION
>        NAME# &INSTRUCTION
- in 2nd line of .txt file, where object name is always located, so it looks like
>        Shaky Property Gate# +owned
>        Written Paper# &written
- telling the game that the object from this file is a subject of ownership (writing) mechanics.

2HOL passwords follow the same syntax.
To make building* ("the structure on the ground") capable of carrying the password, the corresponding object file must have "# &password-protected":
>       Open Wooden Door# &password-protected
To make hand-held item** capable of getting the password, &password-assignable must be added
>       Pine Door# &password-assignable
&password-assignable is used for objects that receive the password while player holds them in hands. So freshly constructed but not installed password-protected door gets &can-get-password.
&password-protected is used for results of transitions that involved objects with &can-get-password. So the structure, the installed password-protected door, as well as its open variation, gets &password.

* - only buildings suits for that, other objects are going to result in nonsense: they will not crash server, but prone of weird (unexpected and untested) behavior.
** - only items that can be picked up suit for that, * concern applies here as well.

There are no tools in the assets editor to add the said flags, they must be written manually through text/code editor. No testing on editor ability to parse unrecognized instructions were performed, [speculation]it is possible that accordingly modified object will crash the editor on each attempt to parse it.[/speculation]

The feature is provided as "a sharp tool": discretion is advised when using it with new objects:
- each player can carry only 1 password at a time, but there are no restrictions on number of times anybody can change his active password;
- there are no in-built restrictions on numbers of password-bearing objects that player can create, nor for behavior limitations of these objects: I highly recommend to not introduce any password-bearing object without decay transition that will turn it into generic object after limited amount of time; as cyclical transitions, like opened door with password -> closed door with password -> opened door again, reset the decay timer, it will work as long as the structure remains in regular use;
- it is expected that this is going to be the best property-protecting option available at the moment; therefore, it must go at a luxurious price effort and resource-wise; the constant upkeep at least in a form of paid attention to reset decay timer is expected to be the main limiting factor against mass-producing of password-protected objects. As any such tool, it is possible to exploit it in a variety of griefing techniques.
- if player creates &password-assignable item while not carrying "object's password", the item will be created without password, providing generic access to any player;
- if player creates &password-assignable item while carrying "object's password", but will not install the object, leaving it on the ground in intermediate state, no password will be preserved;
- if some other player picks another player's &password-assignable item and turns it into &password-protected structure, "object's password" of the builder, not of the crafter, will be applied. If builder had no "object's password", the structure will allow generic access.